#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

#-----------------------------------------------------------------------------
# Bash Completion
#-----------------------------------------------------------------------------
# enable bash completion in interactive shells
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
elif [ -f /usr/share/bash-completion/bash_completion ] && ! shopt -oq posix; then
    . /usr/share/bash-completion/bash_completion
fi     

#-----------------------------------------------------------------------------
# History and Autocompletion
#-----------------------------------------------------------------------------
# Appends to the history file, rather than overwriting it.
shopt -s histappend

# Don't save commands that start with a space or are duplicates.
HISTCONTROL=ignoreboth

# Set the number of commands to store in memory.
HISTSIZE=10000

# Set the number of commands to store in the history file.
HISTFILESIZE=20000

#-----------------------------------------------------------------------------
# Prompt
#-----------------------------------------------------------------------------
# PS1: Configures the shell prompt.
# It sets the prompt color to bright blue and then resets it, so
# your typed commands use the default Ghostty foreground color.
# PS1='\[\e[1;34m\][\u@\h \W]\$ \[\e[0m\]'
PS1='[\u@\h \W]\$ '

#-----------------------------------------------------------------------------
# General Aliases
#-----------------------------------------------------------------------------
alias ls='ls --color=auto'
alias grep='grep --color=auto'

#-----------------------------------------------------------------------------
# git
#-----------------------------------------------------------------------------
alias gint='git init'
alias gs='git status -s'
alias gcl='git clone'
alias ga='git add'
alias gaa='git add .'
alias gc='git commit -m'
alias gac='gaa && gc'
alias gpsh='git push origin HEAD'
alias gpsd='git push origin dev'
alias gpsm='git push origin main'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gpl='git pull origin'
alias gpld='gpl dev'
alias gr='git remote origin'

#-----------------------------------------------------------------------------
# npm
#-----------------------------------------------------------------------------
alias nint='npm init --y'
alias ni='npm install'
alias nd='npm run dev'
alias nb='npm run build'
alias ns='npm run start'

#-----------------------------------------------------------------------------
# pnpm
#-----------------------------------------------------------------------------
alias pnit='pnpm init'
alias pna='pnpm add'
alias pni='pnpm install'
alias pnd='pnpm dev'
alias pnb='pnpm build'
alias pns='pnpm start'

#-----------------------------------------------------------------------------
# bun
#-----------------------------------------------------------------------------
alias bnit='bun init'
alias bna='bun add'
alias bni='bun install'
alias bnd='bun dev'
alias bnb='bun build'
alias bns='bun start'
alias bpmd="bunx prisma migrate dev"

#-----------------------------------------------------------------------------
# Directory Access
#-----------------------------------------------------------------------------
alias ..='cd ..'
alias ...='cd ../..'
alias cdW='cd Wrd'
alias cdWA='cd ~/Wrd/AI'
alias cdU='cd ~/Wrd/Hifi/Untangable'
alias cdH='cd ~/Wrd/Hifi'


# Enable typing just the directory name to `cd` into it
shopt -s autocd

# Jump to the last visited directory
alias back='cd -'

#-----------------------------------------------------------------------------
# ls
#-----------------------------------------------------------------------------
alias ls='ls --color'

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"



#-----------------------------------------------------------------------------
# System Maintenance
#-----------------------------------------------------------------------------
# Update the system with a single command
update() {
  echo "Updating Arch Linux..."
  sudo pacman -Syu
}
#---------

netRestart() {
  echo "Restarting NetworkManager..."
  sudo systemctl restart NetworkManager
}

scanWifi(){
  echo "Scanning for Wi-Fi networks..."
  nmcli device wifi rescan
  nmcli device wifi list
}



gstart() {
  if [ -z "$1" ]; then
    echo "Error: Please provide a project name."
    echo "Usage: gstart <project_name>"
    return 1
  fi

  local PROJECT_NAME="$1"
  mkproject "$PROJECT_NAME"
  cd "$PROJECT_NAME"
  git init
  echo "Initialized empty Git repository in $(pwd)/.git/"
}
# gstart myproject


cleanup() {
  echo "Cleaning up common build artifacts..."
  rm -rf node_modules package-lock.json dist build .parcel-cache
  echo "Cleanup complete!"
}
# cleanup

up() {
  local count=${1:-1}
  local dir=""
  for ((i=1; i<=count; i++)); do
    dir="../$dir"
  done
  cd "$dir"
}  
# up 2



backup() {
  if [ -z "$1" ]; then
    echo "Error: Please provide a file to back up."
    echo "Usage: backup <file_name>"
    return 1
  fi

  local FILENAME="$1"
  local TIMESTAMP=$(date +"%Y%m%d%H%M%S")
  local BACKUP_FILENAME="${FILENAME}_${TIMESTAMP}.bak"

  if [ -f "$FILENAME" ]; then
    cp "$FILENAME" "$BACKUP_FILENAME"
    echo "Backup created: $BACKUP_FILENAME"
  else
    echo "Error: File '$FILENAME' not found."
  fi
}
# backup myfile.txt


killport() {
  if [ -z "$1" ]; then
    echo "Error: Please provide a port number."
    echo "Usage: killport <port_number>"
    return 1
  fi

  local PORT_NUMBER="$1"
  local PID=$(lsof -t -i:"$PORT_NUMBER")

  if [ -n "$PID" ]; then
    echo "Killing process on port $PORT_NUMBER (PID: $PID)..."
    kill "$PID"
    echo "Process killed."
  else
    echo "No process found on port $PORT_NUMBER."
  fi
}
# killport 3000



my-ip() {
  echo "Getting your IP addresses..."
  # Public IP
  echo "Public IP: $(curl -s ifconfig.me)"
  # Local IP (using 'ip' for a cleaner output)
  echo "Local IP(s):"
  ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
}
# my-ip



find-live-hosts() {
  echo "Scanning for live hosts on the local network..."
  sudo nmap -sn 192.168.1.0/24
}
# find-live-hosts




system-performance-summary() {
  echo "Generating System Performance Summary..."
  echo "----------------------------------------"

  echo "### CPU Usage ###"
  top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print "CPU Idle: " $1 "%"}'

  echo ""
  echo "### Memory Usage ###"
  free -h | awk 'NR==2{printf "Used: %s\nFree: %s\n", $3, $4}'
  
  echo ""
  echo "### Disk Usage ###"
  df -h / | awk 'NR==2{printf "Used: %s\nFree: %s\n", $3, $4}'

  echo ""
  echo "### Top 5 Processes by Memory ###"
  ps aux --sort=-%mem | awk 'NR<=6 {print $0}'

}
# system-performance-summary

--------------------------------------------------------------------
# ble.sh Configuration
#-----------------------------------------------------------------------------
# This sources the main ble.sh script that provides inline autosuggestions.
[ -f /usr/share/blesh/ble.sh ] && source /usr/share/blesh/ble.sh